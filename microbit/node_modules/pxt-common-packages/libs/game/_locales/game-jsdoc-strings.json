{
  "ArcadePhysicsEngine": "A physics engine that does simple AABB bounding box check",
  "ArcadePhysicsEngine.overlaps": "Returns sprites that overlap with the given sprite. If type is non-zero, also filter by type.",
  "ArcadePhysicsEngine.overlaps|param|sprite": "@param layer",
  "Math": "More complex operations with numbers.",
  "Math.FastRandom": "Fast, 16 bit, seedable (pseudo) random generator.",
  "Math.FastRandom.next": "@returns the next random number between 0x0001 and 0xFFFF inclusive",
  "Math.FastRandom.percentChance": "@returns a boolean with approximately the given percent chance to be true or false",
  "Math.FastRandom.percentChance|param|percent": "the percentage chance that the returned value will be true from 0 - 100",
  "Math.FastRandom.pickRandom": "Returns a random element from the given list",
  "Math.FastRandom.pickRandom|param|list": "The list to choose an element from",
  "Math.FastRandom.randomBool": "@returns a random boolean value",
  "Math.FastRandom.randomRange": "@returns a random value between min and max (inclusive). If min is greater than or equal to max, returns min.",
  "Math.FastRandom.randomRange|param|max": "the maximum value to generate",
  "Math.FastRandom.randomRange|param|min": "the minimum value to generate",
  "Math.FastRandom.reset": "Reset the state to the current seed",
  "Math.percentChance": "Returns a random boolean that is true the given percentage of the time.",
  "Math.percentChance|param|percentage": "The percentage chance that the returned value will be true from 0 - 100",
  "Math.pickRandom": "Returns a random element from the given list",
  "Math.pickRandom|param|list": "The list to choose an element from",
  "PhysicsEngine.addSprite": "Adds sprite to the physics",
  "PhysicsEngine.collisions": "Apply collisions",
  "PhysicsEngine.move": "Apply physics",
  "Sprite": "A sprite on the screen",
  "Sprite.data": "Custom data",
  "Sprite.destroy": "Destroy the sprite",
  "Sprite.image": "Gets the current image",
  "Sprite.isHittingTile": "Check if there is an obstacle in the given direction",
  "Sprite.isOutOfScreen": "Indicates if the sprite is outside the screen",
  "Sprite.kind": "The type of sprite",
  "Sprite.layer": "A bitset of layer. Each bit is a layer, default is 1.",
  "Sprite.lifespan": "Time to live in milliseconds. The lifespan decreases by 1 on each millisecond\nand the sprite gets destroyed when it reaches 0.",
  "Sprite.onCollision": "Registers code when the sprite collides with an obstacle",
  "Sprite.onCollision|param|direction": "@param handler",
  "Sprite.onDestroyed": "Run code when the sprite is destroyed",
  "Sprite.onOverlap": "Registers code when the sprite overlaps with another sprite",
  "Sprite.overlapsWith": "Check if this sprite overlaps another sprite",
  "Sprite.say": "Display a speech bubble with the text, for the given time",
  "Sprite.say|param|text": "the text to say, eg: \":)\"",
  "Sprite.setFlag": "Set a sprite flag",
  "Sprite.setImage": "Sets the image on the sprite",
  "Sprite.setKind": "The type of sprite",
  "Sprite.setPosition": "Set the sprite position in pixels starting from the top-left corner of the screen.",
  "Sprite.setPosition|param|x": "horizontal position in pixels",
  "Sprite.setPosition|param|y": "vertical position in pixels",
  "Sprite.setVelocity": "Sets the sprite velocity in pixel / sec",
  "Sprite.setVelocity|param|vx": "@param vy ",
  "Sprite.startEffect": "Start an effect on this sprite",
  "Sprite.startEffect|param|effect": "the type of effect to create",
  "Sprite.tileHitFrom": "Get the obstacle sprite in a given direction if any",
  "SpriteSet.add": "Adds the sprite, returns true if added; false if the sprite was already in the set",
  "SpriteSet.addFrom": "Adds sprite and removes from old set. Returns true if sprite was in old set and not in new set.",
  "SpriteSet.addFrom|param|oldSet": "@param sprite ",
  "SpriteSet.clear": "Removes all the sprites from the set",
  "SpriteSet.contains": "Checks if the sprite is part of the set",
  "SpriteSet.createFromArray": "Create a new set from an array of sprites",
  "SpriteSet.length": "Gets the number of sprites in the set",
  "SpriteSet.pop": "Removes the last sprite in the set",
  "SpriteSet.remove": "Removes sprite from set. Returns true if the sprite was in the set",
  "SpriteSet.sprites": "Gets the snapshot of the current list of sprites",
  "controller": "Access to game controls",
  "controller.Button.isPressed": "Indicates if the button is currently pressed",
  "controller.Button.onEvent": "Run some code when a button is pressed, released, or held",
  "controller.Button.pauseUntil": "Pauses until a button is pressed or released",
  "controller.Controller.A": "Gets the right button",
  "controller.Controller.B": "Gets the right button",
  "controller.Controller.down": "Gets the right button",
  "controller.Controller.dx": "Get the horizontal movement, given the step and state of buttons",
  "controller.Controller.dx|param|step": "the distance, eg: 100",
  "controller.Controller.dy": "Get the vertical movement, given the step and state of buttons",
  "controller.Controller.dy|param|step": "the distance, eg: 100",
  "controller.Controller.isPressed": "Indicates if the button is currently pressed",
  "controller.Controller.left": "Gets the left button",
  "controller.Controller.menu": "Gets the right button",
  "controller.Controller.moveSprite": "Control a sprite using the direction buttons from the controller. Note that this will overwrite\nthe current velocity of the sprite whenever a directional button is pressed. To stop controlling\na sprite, pass 0 for vx and vy.\n* @param sprite The Sprite to control",
  "controller.Controller.moveSprite|param|vx": "The velocity used for horizontal movement when left/right is pressed",
  "controller.Controller.moveSprite|param|vy": "The velocity used for vertical movement when up/down is pressed",
  "controller.Controller.onButtonEvent": "Run some code when a button is pressed, released, or held",
  "controller.Controller.onEvent": "Register code run when a controller event occurs",
  "controller.Controller.onEvent|param|event": "@param handler",
  "controller.Controller.right": "Gets the right button",
  "controller.Controller.up": "Gets the right button",
  "controller.dx": "Get the horizontal movement, given the step and state of buttons",
  "controller.dx|param|step": "the distance, eg: 100",
  "controller.dy": "Get the vertical movement, given the step and state of buttons",
  "controller.dy|param|step": "the distance, eg: 100",
  "controller.moveSprite": "Control a sprite using the direction buttons from the controller. Note that this\ncontrol will take over the vx and vy of the sprite and overwrite any changes\nmade unless a 0 is passed.\n* @param sprite The Sprite to control",
  "controller.moveSprite|param|vx": "The velocity used for horizontal movement when left/right is pressed",
  "controller.moveSprite|param|vy": "The velocity used for vertical movement when up/down is pressed",
  "controller.pauseUntilAnyButtonIsPressed": "Pause the program until a button is pressed",
  "effects.ImageEffect.applyTo": "Apply this effect to the image of the current sprite",
  "effects.ImageEffect.change": "Change the given image with this effect",
  "effects.ImageEffect.startScreenEffect": "Make this effect occur repeatedly on the background image",
  "effects.ImageEffect.startScreenEffect|param|delay": "delay between instances of the effect",
  "effects.ImageEffect.startScreenEffect|param|times": "number of times effect should occur",
  "effects.ParticleEffect.destroy": "Destroy the provided sprite with an effect\n\nuses the default rate for this effect.",
  "effects.ParticleEffect.start": "Attaches a new particle animation to the sprite or anchor for a short period of time",
  "effects.ParticleEffect.start|param|anchor": "@param duration",
  "effects.ScreenEffect.endScreenEffect": "If this effect is currently occurring as a full screen effect, stop producing particles and end the effect",
  "effects.ScreenEffect.startScreenEffect": "Creates a new effect that occurs over the entire screen",
  "effects.ScreenEffect.startScreenEffect|param|particlesPerSecond": "@param duration",
  "effects.clearParticles": "Removes all effects at anchor's location",
  "effects.clearParticles|param|anchor": "the anchor to remove effects from",
  "game": "Game transitions and dialog",
  "game.addScenePopHandler": "Register a handler that runs whenever a scene is popped off of the scene\nstack. Useful for extensions that need to store/restore state as the\nevent context changes. The handler is run AFTER the pop operation. (i.e.\nafter game.currentScene() has changed)\n* @param handler Code to run when a scene is removed from the top of the stack",
  "game.addScenePushHandler": "Register a handler that runs whenever a scene is pushed onto the scene\nstack. Useful for extensions that need to store/restore state as the\nevent context changes. The handler is run AFTER the push operation (i.e.\nafter game.currentScene() has changed)\n* @param handler Code to run when a scene is pushed onto the stack",
  "game.ask": "Prompts the user for a boolean question",
  "game.askForString": "Ask the player for a string value.",
  "game.askForString|param|answerLength": "The maximum number of characters the user can enter (1 - 24)",
  "game.askForString|param|message": "The message to display on the text-entry screen",
  "game.ask|param|title": "@param subtitle",
  "game.debug": "Determines if diagnostics are shown",
  "game.onPaint": "Draw on screen before sprites, after background",
  "game.onShade": "Draw on screen after sprites",
  "game.onUpdate": "Update the position and velocities of sprites",
  "game.onUpdateInterval": "Run code on an interval of time. This executes before game.onUpdate()",
  "game.over": "Finish the game and display the score",
  "game.removeScenePopHandler": "Remove a scene pop handler. Useful for extensions that need to store/restore state as the\nevent context changes.\n* @param handler The handler to remove",
  "game.removeScenePushHandler": "Remove a scene push handler. Useful for extensions that need to store/restore state as the\nevent context changes.\n* @param handler The handler to remove",
  "game.runtime": "Returns the time since the game started in milliseconds",
  "game.setDialogCursor": "Change the default image used for the cursor that appears in the\nbottom left of the dialog box.\n* @param cursor The image to use for the cursor",
  "game.setDialogFrame": "Change the default dialog frame to a new image. Dialog frames\nare divided into three rows and three columns and are used to define\nthe outer frame of the dialog box.\n* @param frame A square image with a width and height divisible by three",
  "game.setDialogTextColor": "Change the color for the text in dialog boxes.\n* @param color The index of the color 0-15",
  "game.setGameOverEffect": "Set the effect that occurs when the game is over",
  "game.setGameOverEffect|param|win": "whether the animation should run on a win (true)",
  "game.setGameOverSound": "Set the music that occurs when the player wins",
  "game.setGameOverSound|param|win": "@param effect",
  "game.showLongText": "Show a long text string in a dialog box that will scroll\nusing the \"A\" or \"down\" buttons. The previous section of the\ntext is shown using the \"up\" button. This function\nhalts execution until the last page of text is dismissed.\n* @param str The text to display",
  "game.showLongText|param|layout": "The layout to use for the dialog box",
  "game.splash": "Show a title and an optional subtitle menu",
  "game.splash|param|title": "@param subtitle",
  "info": "Head-up display\n\nHead-up display",
  "info.PlayerInfo.changeLifeBy": "Change the life of a player",
  "info.PlayerInfo.changeScoreBy": "Change the score of a player",
  "info.PlayerInfo.hasLife": "Return true if the given player currently has a value set for health,\nand false otherwise.",
  "info.PlayerInfo.life": "Get the player life",
  "info.PlayerInfo.onLifeZero": "Runs code when life reaches zero",
  "info.PlayerInfo.score": "Get the player score",
  "info.PlayerInfo.setLife": "Set the player life",
  "info.PlayerInfo.setScore": "Set the player score",
  "info.backgroundColor": "Get the current color of the background of the score, countdown, and life\nelements",
  "info.borderColor": "Get the current color of the borders around the score, countdown, and life\nelements",
  "info.changeLifeBy": "Change the lives by the given amount",
  "info.changeLifeBy|param|value": "the change of lives, eg: -1",
  "info.changeScoreBy": "Change the score by the given amount",
  "info.changeScoreBy|param|value": "the amount of change, eg: 1",
  "info.fontColor": "Get the current color of the text usded in the score, countdown, and life\nelements",
  "info.highScore": "Get the last recorded high score",
  "info.life": "Get the number of lives",
  "info.onCountdownEnd": "Run code when the countdown reaches 0. If this function\nis not called then game.over() is called instead",
  "info.onLifeZero": "Run code when the player's life reaches 0. If this function\nis not called then game.over() is called instead",
  "info.score": "Get the current score if any",
  "info.setBackgroundColor": "Sets the color of the background of the score, countdown, and life\nelements. Defaults to 1",
  "info.setBackgroundColor|param|color": "The index of the color (0-15)",
  "info.setBorderColor": "Sets the color of the borders around the score, countdown, and life\nelements. Defaults to 3",
  "info.setBorderColor|param|color": "The index of the color (0-15)",
  "info.setFontColor": "Sets the color of the text used in the score, countdown, and life\nelements. Defaults to 3",
  "info.setFontColor|param|color": "The index of the color (0-15)",
  "info.setLife": "Set the number of lives",
  "info.setLifeImage": "Replaces the image used to represent the player's lives. Images\nshould be no larger than 8x8",
  "info.setLife|param|value": "the number of lives, eg: 3",
  "info.setScore": "Set the score",
  "info.showCountdown": "Set whether score should be displayed",
  "info.showCountdown|param|on": "if true, score is shown; otherwise, score is hidden",
  "info.showLife": "Set whether life should be displayed",
  "info.showLife|param|on": "if true, lives are shown; otherwise, lives are hidden",
  "info.showScore": "Set whether score should be displayed",
  "info.showScore|param|on": "if true, score is shown; otherwise, score is hidden",
  "info.startCountdown": "Start a countdown of the given duration in seconds",
  "info.startCountdown|param|duration": "the duration of the countdown, eg: 10",
  "info.stopCountdown": "Stop the current countdown and hides the timer display",
  "info.updateHighScore": "Sends the current score and the new high score",
  "menu.Animation": "An animation that periodically calls a callback with a linear\ntiming function",
  "menu.Animation.chain": "Sets an animation to run after this animation completes. Only\none animation can be registered to run after\n* @param next The next animation to run\n@return the Animation",
  "menu.Animation.duration": "Sets the duration for the linear timing function\n* @param period The duration of the animation in milliseconds\n@return the Animation",
  "menu.Animation.from": "Sets the start value for the linear timing function\n* @param start The start value to animate from\n@return the Animation",
  "menu.Animation.loop": "Starts the animation in a loop",
  "menu.Animation.onEnded": "Registers a handler to run when the animation is completed (stoppied)",
  "menu.Animation.start": "Starts the animation for a single run",
  "menu.Animation.stop": "Stops the execution of the animation",
  "menu.Animation.to": "Sets the end value for the linear timing function\n* @param end The end value to end the animation at\n@return the Animation",
  "menu.BoundingBox": "A rectangle that represents the bounds of an element",
  "menu.Bounds": "A Node that simply constrains its children",
  "menu.Component": "A Node that can receive input",
  "menu.Container": "A Node that caches its content to an Image. Useful for nodes that\nhave complex (but mostly static) child trees",
  "menu.HorizontalFlow": "A Container that lays out its children in a horizontal flow. Children\nare given bounds of equal width",
  "menu.JustifiedContent": "A Node that justifies its children Node within its bounds. Should\nonly be used with Nodes that have a fixed width/height",
  "menu.Node": "A Node in the UI tree with dimensions",
  "menu.Node.animate": "Creates a linear timed Animation for this node\n* @param cb The callback that the Animation will call on this node",
  "menu.Node.appendChild": "Adds a child to this node\n* @param n The Node to add",
  "menu.Node.dispose": "Disposes of the Node and its children",
  "menu.Node.drawChildren": "Draws the children of the component within the available bounds\n* @param canvas The image to draw the children on",
  "menu.Node.drawChildren|param|available": "The available bounds in which the children will be drawn",
  "menu.Node.drawSelf": "Draws the component within the available bounds\n* @param canvas The image to draw the component on",
  "menu.Node.drawSelf|param|available": "The available bounds in which the component will be drawn",
  "menu.Node.getBounds": "Gets the bounds for the children of this node\n* @param bb The bounds passed to this node (e.g. from its parent)\n@return The bounds available to children of this node",
  "menu.Node.height": "The current height of the Node",
  "menu.Node.notifyChange": "Triggers a redraw of this Node (and possibly its parent in the tree)",
  "menu.Node.width": "The current width of the Node",
  "menu.RectNode": "A simple rectangle node with a single color",
  "menu.ScrollingLabel": "A label that scrolls its content in a loop",
  "menu.TextNode": "A Node that prints text",
  "menu.VerticalFlow": "A Container that lays out its children in a vertical flow. Children\nare given bounds of equal height",
  "menu.focus": "Pushes a component on top of the focus stack. The currently focused\ncomponent receives all button events until it is unfocused.",
  "menu.popFocus": "Removes the currently focused component from the focus stack\nand returns focus to the next component.",
  "menu.setRoot": "Sets the root node of the UI\n* @param node The Node to make the UI root",
  "particles.AreaFactory": "A factory for creating particles within rectangular area",
  "particles.BubbleSource": "A source of particles where the particles oscillate horizontally, and occasionally change\nbetween a given number of defined states",
  "particles.FireSource": "A source of particles where particles will occasionally change speed based off of each other",
  "particles.Particle": "A single particle",
  "particles.ParticleAnchor": "An anchor for a Particle to originate from",
  "particles.ParticleFactory": "A factory for generating particles",
  "particles.ParticleFactory.createParticle": "Generate a particle at the position of the given anchor",
  "particles.ParticleFactory.drawParticle": "Draw the given particle at the given location",
  "particles.ParticleFactory.drawParticle|param|particle": "@param x ",
  "particles.ParticleSource": "A source of particles",
  "particles.ParticleSource.anchor": "The anchor this source is currently attached to",
  "particles.ParticleSource.clear": "Clear all particles emitted from this source",
  "particles.ParticleSource.destroy": "Destroy the source",
  "particles.ParticleSource.enabled": "Set whether this source is currently enabled (emitting particles) or not",
  "particles.ParticleSource.enabled@set": "Set whether this source is currently enabled (emitting particles) or not",
  "particles.ParticleSource.lifespan": "Time to live in milliseconds. The lifespan decreases by 1 on each millisecond\nand the source gets destroyed when it reaches 0.",
  "particles.ParticleSource.setAcceleration": "Sets the acceleration applied to the particles",
  "particles.ParticleSource.setAnchor": "Set a anchor for particles to be emitted from",
  "particles.ParticleSource.setEnabled": "Enables or disables particles",
  "particles.ParticleSource.setFactory": "Sets the particle factor",
  "particles.ParticleSource.setRate": "Sets the number of particle created per second",
  "particles.ShapeFactory": "A factory for creating particles with the provided shapes fall down the screen.\n* Any pixels assigned to 0xF (black) in the provided shape will be replaced with a\nrandom color for each particle.",
  "particles.ShapeFactory.addShape": "Add another possible shape for a particle to display as",
  "particles.SprayFactory": "A factory for creating a spray of particles",
  "particles.TrailFactory": "A factory for creating a trail that is emitted by sprites.",
  "particles.cacheCos": "@returns array of cached cos values between 0 and 360 degrees",
  "particles.cacheCos|param|slices": "number of cached cos values to make",
  "particles.cacheSin": "@returns array of cached sin values between 0 and 360 degrees",
  "particles.cacheSin|param|slices": "number of cached sin values to make",
  "particles.createParticleSource": "Creates a new source of particles attached to a sprite",
  "particles.createParticleSource|param|sprite": "@param particlesPerSecond number of particles created per second",
  "particles.disableAll": "Stop all particle sources from creating any new particles",
  "particles.enableAll": "Allow all particle sources to create any new particles",
  "scene": "Control the background, tiles and camera\n\nControl the background, tiles and camera",
  "scene.Scene.millis": "Gets the elapsed time in the scene",
  "scene.addBackgroundLayer": "Adds a moving background layer",
  "scene.addBackgroundLayer|param|distance": "distance of the layer which determines how fast it moves, eg: 10",
  "scene.backgroundColor": "Get the game background color",
  "scene.backgroundImage": "Get the current background image",
  "scene.cameraFollowSprite": "Set the game camera to follow a sprite",
  "scene.cameraShake": "Shake the camera",
  "scene.centerCameraAt": "Moves the camera center to a coordinate position",
  "scene.getTile": "Get the tile at a position in the tile map",
  "scene.getTilesByType": "Get all tiles in the tile map with the given index.",
  "scene.getTile|param|col": "@param row",
  "scene.onHitTile": "Run code when a certain kind of sprite hits a tile",
  "scene.placeOnRandomTile": "Center the given sprite on a random tile that is the given color",
  "scene.placeOnRandomTile|param|sprite": "@param color",
  "scene.screenHeight": "Gets the height of the screen in pixels",
  "scene.screenWidth": "Get the width of the screen in pixels",
  "scene.setBackgroundColor": "Set the game background color",
  "scene.setBackgroundImage": "Set a picture as the background",
  "scene.setTile": "Set an image as a tile at the given index. Tiles should be a 16x16 image",
  "scene.setTileAt": "Set a tile at the given index",
  "scene.setTileAt|param|tile": "@param index",
  "scene.setTileMap": "Set the map for placing tiles in the scene",
  "scene.setTile|param|index": "@param img",
  "sprites": "Sprites on screen",
  "sprites.SpriteMap.neighbors": "Returns a potential list of neighbors",
  "sprites.SpriteMap.overlaps": "Gets the overlaping sprites if any",
  "sprites.SpriteMap.update": "Recompute hashes for all objects",
  "sprites._spriteType": "Gets the sprite type",
  "sprites.allOfKind": "Return an array of all sprites of the given kind.",
  "sprites.allOfKind|param|kind": "the target kind",
  "sprites.create": "Create a new sprite from an image",
  "sprites.createProjectile": "Create a new sprite with given speed, and place it at the edge of the screen so it moves towards the middle.\nThe sprite auto-destroys when it leaves the screen. You can modify position after it's created.",
  "sprites.createProjectileFromSide": "Create a new sprite with given speed, and place it at the edge of the screen so it moves towards the middle.\nThe sprite auto-destroys when it leaves the screen. You can modify position after it's created.",
  "sprites.createProjectileFromSprite": "Create a new sprite with given speed, and place it at the edge of the screen so it moves towards the middle.\nThe sprite auto-destroys when it leaves the screen. You can modify position after it's created.",
  "sprites.create|param|img": "the image",
  "sprites.onCreated": "Run code when a certain kind of sprite is created",
  "sprites.onCreated|param|kind": "@param sprite",
  "sprites.onDestroyed": "Run code when a certain kind of sprite is destroyed",
  "sprites.onDestroyed|param|kind": "@param sprite",
  "sprites.onOverlap": "Run code when two kinds of sprites overlap",
  "tiles.Tile": "A tile in the tilemap",
  "tiles.Tile.place": "Center the given sprite on this tile"
}